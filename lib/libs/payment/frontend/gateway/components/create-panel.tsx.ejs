import FormPanel, { FormPanelRef } from "@/components/panels/form-panel";
import { EnumFieldType } from "@/enums/EnumFieldType";
import { useGatewayCreate } from "@/features/payment/gateway";
import { Gateway } from "@/types/models";
import { forwardRef, useImperativeHandle, useRef } from "react";
import { useTranslation } from "react-i18next";

export type GatewayCreatePanelRef = {
  submit: () => void;
};

export type GatewayCreatePanelProps = {
  onCreated?: (data: Gateway) => void;
};

const GatewayCreatePanel = forwardRef(
  ({ onCreated }: GatewayCreatePanelProps, ref) => {
    const formRef = useRef<FormPanelRef>(null);
    const { t } = useTranslation(["actions", "fields", "translations"]);
    const { mutateAsync: createGateway } = useGatewayCreate();

    useImperativeHandle(
      ref,
      () => ({
        submit: () => {
          formRef.current?.submit();
        },
      }),
      [formRef],
    );

    return (
      <FormPanel
        ref={formRef}
        fields={[
          {
<<<<<<< HEAD:admin/src/pages/cbc/stock-exchange/components/stock-exchange-create-panel.tsx
            name: "slug",
            label: { text: t("stock_exchange.slug", { ns: "fields" }) },
=======
            name: "name",
            label: { text: t("gateway.name", { ns: "fields" }) },
>>>>>>> 50c5a03d428dc939c5a678ea0cd821d0075e3bd4:lib/libs/payment/frontend/gateway/components/create-panel.tsx.ejs
            type: EnumFieldType.TEXT,
            required: true,
          },
        ]}
        button={{ text: t("create", { ns: "actions" }) }}
        onSubmit={async (data) => {
          const createdData = await createGateway({
            data,
          });
          if (typeof onCreated === "function") {
            onCreated(createdData as any);
          }
        }}
      />
    );
  },
);

GatewayCreatePanel.displayName = "GatewayCreatePanel";

export default GatewayCreatePanel;
