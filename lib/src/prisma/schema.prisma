generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model migrations {
  id        Int    @id @default(autoincrement())
  timestamp BigInt
  name      String @db.VarChar(255)
}

model multifactors {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  name       String   @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @default(now()) @db.Timestamp(0)
  users      users[]
}

model screens {
  id           Int            @id @default(autoincrement()) @db.UnsignedInt
  name         String         @db.VarChar(255)
  slug         String         @unique(map: "UQ_90ab71668d0bc61cff3f669c791") @db.VarChar(255)
  description  String         @db.VarChar(255)
  icon         String?        @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(0)
  updated_at   DateTime       @default(now()) @db.Timestamp(0)
  menu_screens menu_screens[]
  role_screens role_screens[]
}

model users {
  id             Int           @id @default(autoincrement()) @db.UnsignedInt
  name           String        @db.VarChar(255)
  email          String        @db.VarChar(255)
  password       String        @db.VarChar(255)
  multifactor_id Int?          @db.UnsignedInt
  code           String?       @db.VarChar(255)
  created_at     DateTime      @default(now()) @db.Timestamp(0)
  updated_at     DateTime      @default(now()) @db.Timestamp(0)
  role_users     role_users[]
  multifactors   multifactors? @relation(fields: [multifactor_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_users_to_multifactors_on_multifactor_id")

  @@index([multifactor_id], map: "fk_users_to_multifactors_on_multifactor_id")
}

model visibilities {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  name       String   @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @default(now()) @db.Timestamp(0)
}

model role_screens {
  role_id    Int      @db.UnsignedInt
  screen_id  Int      @db.UnsignedInt
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @default(now()) @db.Timestamp(0)
  roles      roles    @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_role_screens_roles")
  screens    screens  @relation(fields: [screen_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_role_screens_screen")

  @@id([role_id, screen_id])
  @@index([screen_id], map: "fk_role_screens_screen")
}

model role_users {
  role_id    Int      @db.UnsignedInt
  user_id    Int      @db.UnsignedInt
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @default(now()) @db.Timestamp(0)
  roles      roles    @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_role_users_roles")
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_role_users_user")

  @@id([role_id, user_id])
  @@index([user_id], map: "fk_role_users_user")
}

model roles {
  id           Int            @id @default(autoincrement()) @db.UnsignedInt
  name         String         @db.VarChar(255)
  description  String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(0)
  updated_at   DateTime       @default(now()) @db.Timestamp(0)
  role_screens role_screens[]
  role_users   role_users[]
}

model setting_values {
  id          Int      @id @default(autoincrement()) @db.UnsignedInt
  value       String   @db.VarChar(1023)
  name        String   @unique(map: "UQ_107f182a06aebe76c709d58dfbd") @db.VarChar(255)
  description String?  @db.VarChar(255)
  label       String?  @db.VarChar(255)
  setting_id  Int      @db.UnsignedInt
  created_at  DateTime @default(now()) @db.Timestamp(0)
  updated_at  DateTime @default(now()) @db.Timestamp(0)
  settings    settings @relation(fields: [setting_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_4001238c50d670cf048b157cf9b")

  @@index([setting_id], map: "FK_4001238c50d670cf048b157cf9b")
}

model settings {
  id             Int              @id @default(autoincrement()) @db.UnsignedInt
  name           String           @db.VarChar(255)
  created_at     DateTime         @default(now()) @db.Timestamp(0)
  updated_at     DateTime         @default(now()) @db.Timestamp(0)
  setting_values setting_values[]
}

model files {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  name       String   @db.VarChar(255)
  url        String   @db.VarChar(255)
  extension  String   @db.VarChar(15)
  bytes      Int
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @default(now()) @db.Timestamp(0)
}

model menu_screens {
  menu_id   Int     @db.UnsignedInt
  screen_id Int     @db.UnsignedInt
  screens   screens @relation(fields: [screen_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_5fce02e2ce60ad6508a0de01464")
  menus     menus   @relation(fields: [menu_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_9b57bb2e47bf2b0dbf693ef456c")

  @@id([menu_id, screen_id])
  @@index([screen_id], map: "FK_5fce02e2ce60ad6508a0de01464")
}

model menus {
  id           Int            @id @default(autoincrement()) @db.UnsignedInt
  name         String         @db.VarChar(255)
  url          String         @unique(map: "UQ_7069e145e36b235e72aba4aa3f8") @db.VarChar(255)
  order        Int            @default(0) @db.UnsignedInt
  menu_id      Int
  icon         String?        @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(0)
  updated_at   DateTime       @default(now()) @db.Timestamp(0)
  menu_screens menu_screens[]
}
